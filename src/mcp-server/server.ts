/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { BoltCore } from "../core.js";
import { SDKOptions } from "../lib/config.js";
import type { ConsoleLogger } from "./console-logger.js";
import { createRegisterPrompt } from "./prompts.js";
import {
  createRegisterResource,
  createRegisterResourceTemplate,
} from "./resources.js";
import { MCPScope } from "./scopes.js";
import { createRegisterTool } from "./tools.js";
import { tool$accountCreateAccount } from "./tools/accountCreateAccount.js";
import { tool$accountDetectAccount } from "./tools/accountDetectAccount.js";
import { tool$configurationGetMerchantCallbacks } from "./tools/configurationGetMerchantCallbacks.js";
import { tool$configurationGetMerchantIdentifiers } from "./tools/configurationGetMerchantIdentifiers.js";
import { tool$configurationSetMerchantCallbacks } from "./tools/configurationSetMerchantCallbacks.js";
import { tool$oAuthOAuthToken } from "./tools/oAuthOAuthToken.js";
import { tool$ordersCreateOrderToken } from "./tools/ordersCreateOrderToken.js";
import { tool$ordersTrackOrder } from "./tools/ordersTrackOrder.js";
import { tool$statementsGetStatements } from "./tools/statementsGetStatements.js";
import { tool$testingCreateTestingShopperAccount } from "./tools/testingCreateTestingShopperAccount.js";
import { tool$testingGetTestCreditCardToken } from "./tools/testingGetTestCreditCardToken.js";
import { tool$testingTestShipping } from "./tools/testingTestShipping.js";
import { tool$transactionsCaptureTransaction } from "./tools/transactionsCaptureTransaction.js";
import { tool$transactionsGetTransactionDetails } from "./tools/transactionsGetTransactionDetails.js";
import { tool$transactionsRefundTransaction } from "./tools/transactionsRefundTransaction.js";
import { tool$transactionsReviewTransaction } from "./tools/transactionsReviewTransaction.js";
import { tool$transactionsUpdateTransaction } from "./tools/transactionsUpdateTransaction.js";
import { tool$transactionsVoidTransaction } from "./tools/transactionsVoidTransaction.js";
import { tool$webhooksCreateWebhook } from "./tools/webhooksCreateWebhook.js";
import { tool$webhooksDeleteWebhook } from "./tools/webhooksDeleteWebhook.js";
import { tool$webhooksGetWebhook } from "./tools/webhooksGetWebhook.js";
import { tool$webhooksQueryWebhooks } from "./tools/webhooksQueryWebhooks.js";

export function createMCPServer(deps: {
  logger: ConsoleLogger;
  allowedTools?: string[] | undefined;
  scopes?: MCPScope[] | undefined;
  getSDK?: () => BoltCore;
  serverURL?: string | undefined;
  security?: SDKOptions["security"] | undefined;
  serverIdx?: SDKOptions["serverIdx"] | undefined;
}) {
  const server = new McpServer({
    name: "Bolt",
    version: "0.1.0",
  });

  const getClient = deps.getSDK || (() =>
    new BoltCore({
      security: deps.security,
      serverURL: deps.serverURL,
      serverIdx: deps.serverIdx,
      debugLogger: deps.logger.level === "debug"
        ? {
          log: (...args) => console.log(...args),
          group: (...args) => console.group(...args),
          groupEnd: (...args) => console.groupEnd(...args),
        }
        : undefined,
    }));

  const scopes = new Set(deps.scopes);

  const allowedTools = deps.allowedTools && new Set(deps.allowedTools);
  const tool = createRegisterTool(
    deps.logger,
    server,
    getClient,
    scopes,
    allowedTools,
  );
  const resource = createRegisterResource(
    deps.logger,
    server,
    getClient,
    scopes,
  );
  const resourceTemplate = createRegisterResourceTemplate(
    deps.logger,
    server,
    getClient,
    scopes,
  );
  const prompt = createRegisterPrompt(deps.logger, server, getClient, scopes);
  const register = { tool, resource, resourceTemplate, prompt };
  void register; // suppress unused warnings

  tool(tool$accountCreateAccount);
  tool(tool$accountDetectAccount);
  tool(tool$configurationGetMerchantCallbacks);
  tool(tool$configurationSetMerchantCallbacks);
  tool(tool$configurationGetMerchantIdentifiers);
  tool(tool$ordersCreateOrderToken);
  tool(tool$ordersTrackOrder);
  tool(tool$statementsGetStatements);
  tool(tool$transactionsCaptureTransaction);
  tool(tool$transactionsRefundTransaction);
  tool(tool$transactionsReviewTransaction);
  tool(tool$transactionsVoidTransaction);
  tool(tool$transactionsGetTransactionDetails);
  tool(tool$transactionsUpdateTransaction);
  tool(tool$oAuthOAuthToken);
  tool(tool$testingTestShipping);
  tool(tool$testingCreateTestingShopperAccount);
  tool(tool$testingGetTestCreditCardToken);
  tool(tool$webhooksQueryWebhooks);
  tool(tool$webhooksCreateWebhook);
  tool(tool$webhooksDeleteWebhook);
  tool(tool$webhooksGetWebhook);

  return server;
}
