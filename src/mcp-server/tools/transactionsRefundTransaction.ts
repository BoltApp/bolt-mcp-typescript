/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsRefundTransaction } from "../../funcs/transactionsRefundTransaction.js";
import { RefundTransactionRequest$zodSchema } from "../../models/refundtransactionop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: RefundTransactionRequest$zodSchema.optional(),
};

export const tool$transactionsRefundTransaction: ToolDefinition<typeof args> = {
  name: "transactions-refund-transaction",
  description: `Refund a Transaction

This refunds a captured transaction. Refunds can be done for any partial amount or for the total authorized amount. These refunds are processed synchronously and return information about the refunded transaction in the standard \`transaction_view\` object.`,
  annotations: {
    "destructiveHint": false,
    "idempotentHint": false,
    "openWorldHint": false,
    "readOnlyHint": false,
  },
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await transactionsRefundTransaction(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
