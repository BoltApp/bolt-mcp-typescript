/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsCaptureTransaction } from "../../funcs/transactionsCaptureTransaction.js";
import { CaptureTransactionRequest$zodSchema } from "../../models/capturetransactionop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: CaptureTransactionRequest$zodSchema.optional(),
};

export const tool$transactionsCaptureTransaction: ToolDefinition<typeof args> =
  {
    name: "transactions-capture-transaction",
    description: `Capture a Transaction

This captures funds for the designated transaction. A capture can be done for any partial amount or for the total authorized amount.

Although the response returns the standard \`transaction_view\` object, only \`captures\` and either \`id\` or \`reference\` are needed.
`,
    annotations: {
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": false,
      "readOnlyHint": false,
    },
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await transactionsCaptureTransaction(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
