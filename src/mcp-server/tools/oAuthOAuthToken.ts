/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { oAuthOAuthToken } from "../../funcs/oAuthOAuthToken.js";
import { OAuthTokenRequest$zodSchema } from "../../models/oauthtokenop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: OAuthTokenRequest$zodSchema.optional(),
};

export const tool$oAuthOAuthToken: ToolDefinition<typeof args> = {
  name: "O-auth-O-auth-token",
  description: `OAuth Token Endpoint

Endpoint for receiving access, ID, and refresh tokens from Bolt's OAuth server. 

To use this endpoint, first use the Authorization Code Request flow by using the \`authorization_code\` Grant Type (\`grant_type\`). Then, in the event that you would need a second or subsequent code, use the \`refresh_token\` value returned from a successful request as the \`refresh_token\` input value in your subsequent \`refresh_token\` Grant Type (\`grant_type\`) request.

 **Reminder - the Content-Type of this request must be application/x-www-form-urlencoded**
`,
  annotations: {
    "destructiveHint": false,
    "idempotentHint": false,
    "openWorldHint": false,
    "readOnlyHint": false,
  },
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await oAuthOAuthToken(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
