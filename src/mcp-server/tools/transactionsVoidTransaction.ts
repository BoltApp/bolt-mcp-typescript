/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsVoidTransaction } from "../../funcs/transactionsVoidTransaction.js";
import { VoidTransactionRequest$zodSchema } from "../../models/voidtransactionop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: VoidTransactionRequest$zodSchema.optional(),
};

export const tool$transactionsVoidTransaction: ToolDefinition<typeof args> = {
  name: "transactions-void-transaction",
  description: `Void a Transaction

This voids the authorization for a given transaction. Voids must be completed before the authorization is captured.
In the request, either \`transaction_id\` or \`transaction_reference\` is required.
Although the response returns the standard \`transaction_view\` object, only \`status\` and either \`id\` or \`reference\` are needed.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await transactionsVoidTransaction(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
