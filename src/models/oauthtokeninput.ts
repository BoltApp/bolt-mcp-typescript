/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of OAuth 2.0 grant being utilized.
 *
 * @remarks
 *
 * The value will always be `authorization_code` when exchanging an authorization code for an access token.
 */
export const OAuthTokenInputGrantType$zodSchema = z.enum([
  "authorization_code",
]).describe(
  "The type of OAuth 2.0 grant being utilized. \n"
    + "\n"
    + "The value will always be `authorization_code` when exchanging an authorization code for an access token.\n"
    + "",
);

export type OAuthTokenInputGrantType = z.infer<
  typeof OAuthTokenInputGrantType$zodSchema
>;

/**
 * The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`. You can find more information on these options in our [OAuth scope documentation](https://help.bolt.com/developers/references/bolt-oauth/#scopes).
 */
export const Scope$zodSchema = z.enum([
  "bolt.account.manage",
  "bolt.account.view",
  "openid",
]).describe(
  "The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`. You can find more information on these options in our [OAuth scope documentation](https://help.bolt.com/developers/references/bolt-oauth/#scopes).",
);

export type Scope = z.infer<typeof Scope$zodSchema>;

export type OAuthTokenInput = {
  client_id: string;
  client_secret: string;
  code: string;
  grant_type: OAuthTokenInputGrantType;
  scope: Scope;
  state?: string | undefined;
};

export const OAuthTokenInput$zodSchema: z.ZodType<
  OAuthTokenInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  client_id: z.string(),
  client_secret: z.string(),
  code: z.string(),
  grant_type: OAuthTokenInputGrantType$zodSchema,
  scope: Scope$zodSchema,
  state: z.string().optional(),
});
