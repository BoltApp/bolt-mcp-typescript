/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  IAuthorizeResultView,
  IAuthorizeResultView$zodSchema,
} from "./iauthorizeresultview.js";
import {
  MerchantCreditCardAuthorization,
  MerchantCreditCardAuthorization$zodSchema,
} from "./merchantcreditcardauthorization.js";
import {
  MerchantCreditCardAuthorizationRecharge,
  MerchantCreditCardAuthorizationRecharge$zodSchema,
} from "./merchantcreditcardauthorizationrecharge.js";

export type AuthorizeTransactionSecurity = { OAuth: string; xAPIKey: string };

export const AuthorizeTransactionSecurity$zodSchema: z.ZodType<
  AuthorizeTransactionSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  OAuth: z.string().describe(
    "Bolt utilizes the OAuth flow that developers can use to attain access to Bolt Account data via APIs.\n"
      + "For all APIs that require authorization, please provide your `access_token` returned from `/v1/oauth/token` via the basic auth bearer header `Authorization: bearer ${TOKEN}`.\n"
      + "[Read more about the OAuth token endpoint.](/api-bolt/#tag/OAuth)\n"
      + "",
  ),
  xAPIKey: z.string().describe(
    "Admins and Developers can obtain their Bolt API key from the Bolt Merchant Dashboard.",
  ),
});

/**
 * **Authorize a Transaction**
 *
 * @remarks
 * * • `merchant_credit_card_authorization`: For authorizing with a new, unsaved card. This can be for a guest checkout flow, one-time payment, or an existing Bolt shopper.
 * * • `merchant_credit_card_authorization_recharge`: For authorizing a card using a shoppers saved payment methods.
 * * • **Anytime the shopper is paying while logged-in attach their OAuth `access_token` to the request.**
 */
export type AuthorizeTransactionRequestBody =
  | MerchantCreditCardAuthorization
  | MerchantCreditCardAuthorizationRecharge;

export const AuthorizeTransactionRequestBody$zodSchema: z.ZodType<
  AuthorizeTransactionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  MerchantCreditCardAuthorization$zodSchema,
  MerchantCreditCardAuthorizationRecharge$zodSchema,
]).describe(
  "**Authorize a Transaction**\n"
    + "* • `merchant_credit_card_authorization`: For authorizing with a new, unsaved card. This can be for a guest checkout flow, one-time payment, or an existing Bolt shopper.\n"
    + "* • `merchant_credit_card_authorization_recharge`: For authorizing a card using a shoppers saved payment methods.\n"
    + "* • **Anytime the shopper is paying while logged-in attach their OAuth `access_token` to the request.**\n"
    + "",
);

export type AuthorizeTransactionRequest = {
  xPublishableKey?: string | undefined;
  idempotencyKey?: string | undefined;
  RequestBody?:
    | MerchantCreditCardAuthorization
    | MerchantCreditCardAuthorizationRecharge
    | undefined;
};

export const AuthorizeTransactionRequest$zodSchema: z.ZodType<
  AuthorizeTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.union([
    MerchantCreditCardAuthorization$zodSchema,
    MerchantCreditCardAuthorizationRecharge$zodSchema,
  ]).optional(),
  idempotencyKey: z.string().describe(
    "A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/).",
  ).optional(),
  xPublishableKey: z.string().describe(
    "The publicly viewable identifier used to identify a merchant division. This key is found in the Developer > API section of the Bolt Merchant Dashboard [RECOMMENDED].",
  ).optional(),
});

export type AuthorizeTransactionResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  i_authorize_result_view?: IAuthorizeResultView | undefined;
};

export const AuthorizeTransactionResponse$zodSchema: z.ZodType<
  AuthorizeTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  i_authorize_result_view: IAuthorizeResultView$zodSchema.optional(),
});
