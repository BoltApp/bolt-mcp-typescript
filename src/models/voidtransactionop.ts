/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { CreditCardVoid, CreditCardVoid$zodSchema } from "./creditcardvoid.js";
import {
  ErrorsBoltApiResponse,
  ErrorsBoltApiResponse$zodSchema,
} from "./errorsboltapiresponse.js";
import {
  TransactionView,
  TransactionView$zodSchema,
} from "./transactionview.js";

export type VoidTransactionRequest = {
  idempotencyKey?: string | undefined;
  credit_card_void?: CreditCardVoid | undefined;
};

export const VoidTransactionRequest$zodSchema: z.ZodType<
  VoidTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  credit_card_void: CreditCardVoid$zodSchema.optional(),
  idempotencyKey: z.string().describe(
    "A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/).",
  ).optional(),
});

export type VoidTransactionResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  transaction_view?: TransactionView | undefined;
  errors_bolt_api_response?: ErrorsBoltApiResponse | undefined;
};

export const VoidTransactionResponse$zodSchema: z.ZodType<
  VoidTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  errors_bolt_api_response: ErrorsBoltApiResponse$zodSchema.optional(),
  transaction_view: TransactionView$zodSchema.optional(),
});
