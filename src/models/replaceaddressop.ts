/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AddressAccount, AddressAccount$zodSchema } from "./addressaccount.js";
import {
  ShopperMetadata,
  ShopperMetadata$zodSchema,
} from "./shoppermetadata.js";

export type ReplaceAddressSecurity = { OAuth: string; xAPIKey: string };

export const ReplaceAddressSecurity$zodSchema: z.ZodType<
  ReplaceAddressSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  OAuth: z.string().describe(
    "Bolt utilizes the OAuth flow that developers can use to attain access to Bolt Account data via APIs.\n"
      + "For all APIs that require authorization, please provide your `access_token` returned from `/v1/oauth/token` via the basic auth bearer header `Authorization: bearer ${TOKEN}`.\n"
      + "[Read more about the OAuth token endpoint.](/api-bolt/#tag/OAuth)\n"
      + "",
  ),
  xAPIKey: z.string().describe(
    "Admins and Developers can obtain their Bolt API key from the Bolt Merchant Dashboard.",
  ),
});

export type ReplaceAddressRequest = {
  id: string;
  xPublishableKey?: string | undefined;
  idempotencyKey?: string | undefined;
  address_account?: AddressAccount | undefined;
};

export const ReplaceAddressRequest$zodSchema: z.ZodType<
  ReplaceAddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address_account: AddressAccount$zodSchema.optional(),
  id: z.string().describe(
    "The ID for an address in the shopper's Address Book.",
  ),
  idempotencyKey: z.string().describe(
    "A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/).",
  ).optional(),
  xPublishableKey: z.string().describe(
    "The publicly viewable identifier used to identify a merchant division. This key is found in the Developer > API section of the Bolt Merchant Dashboard [RECOMMENDED].",
  ).optional(),
});

/**
 * The shopper-indicated priority of this address compared to other addresses on their account.
 */
export const ReplaceAddressPriority$zodSchema = z.enum([
  "primary",
  "listed",
]).describe(
  "The shopper-indicated priority of this address compared to other addresses on their account.",
);

export type ReplaceAddressPriority = z.infer<
  typeof ReplaceAddressPriority$zodSchema
>;

/**
 * The address object returned in the response.
 */
export type ReplaceAddressResponseBody = {
  company?: string | undefined;
  country?: string | undefined;
  country_code?: string | undefined;
  door_code?: string | null | undefined;
  email_address?: string | undefined;
  first_name?: string | undefined;
  id?: string | undefined;
  last_name?: string | undefined;
  locality?: string | undefined;
  name?: string | undefined;
  phone_number?: string | undefined;
  postal_code?: string | undefined;
  priority?: ReplaceAddressPriority | null | undefined;
  region?: string | undefined;
  region_code?: string | null | undefined;
  street_address1?: string | undefined;
  street_address2?: string | undefined;
  street_address3?: string | null | undefined;
  street_address4?: string | null | undefined;
  metadata?: ShopperMetadata | null | undefined;
  default?: boolean | undefined;
};

export const ReplaceAddressResponseBody$zodSchema: z.ZodType<
  ReplaceAddressResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  company: z.string().optional(),
  country: z.string().optional(),
  country_code: z.string().optional(),
  default: z.boolean().optional(),
  door_code: z.string().nullable().optional(),
  email_address: z.string().optional(),
  first_name: z.string().optional(),
  id: z.string().optional(),
  last_name: z.string().optional(),
  locality: z.string().optional(),
  metadata: ShopperMetadata$zodSchema.nullable().optional(),
  name: z.string().optional(),
  phone_number: z.string().optional(),
  postal_code: z.string().optional(),
  priority: ReplaceAddressPriority$zodSchema.nullable().optional(),
  region: z.string().optional(),
  region_code: z.string().nullable().optional(),
  street_address1: z.string().optional(),
  street_address2: z.string().optional(),
  street_address3: z.string().nullable().optional(),
  street_address4: z.string().nullable().optional(),
}).describe("The address object returned in the response.");

export type ReplaceAddressResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: ReplaceAddressResponseBody | undefined;
};

export const ReplaceAddressResponse$zodSchema: z.ZodType<
  ReplaceAddressResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => ReplaceAddressResponseBody$zodSchema).optional(),
});
