/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  CaptureTransactionWithReference,
  CaptureTransactionWithReference$zodSchema,
} from "./capturetransactionwithreference.js";
import {
  ErrorsBoltApiResponse,
  ErrorsBoltApiResponse$zodSchema,
} from "./errorsboltapiresponse.js";
import {
  TransactionView,
  TransactionView$zodSchema,
} from "./transactionview.js";

export type CaptureTransactionRequest = {
  idempotencyKey?: string | undefined;
  capture_transaction_with_reference?:
    | CaptureTransactionWithReference
    | undefined;
};

export const CaptureTransactionRequest$zodSchema: z.ZodType<
  CaptureTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  capture_transaction_with_reference: CaptureTransactionWithReference$zodSchema
    .optional(),
  idempotencyKey: z.string().describe(
    "A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/).",
  ).optional(),
});

export type ErrorT = {
  code?: number | undefined;
  field?: string | undefined;
  message?: string | undefined;
};

export const ErrorT$zodSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    code: z.number().optional(),
    field: z.string().optional(),
    message: z.string().optional(),
  });

export type Result = {};

export const Result$zodSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({});

/**
 * Unprocessable Entity
 */
export type CaptureTransactionResponseBody = {
  errors?: Array<ErrorT> | undefined;
  result?: Result | undefined;
};

export const CaptureTransactionResponseBody$zodSchema: z.ZodType<
  CaptureTransactionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => ErrorT$zodSchema)).optional(),
  result: z.lazy(() => Result$zodSchema).optional(),
}).describe("Unprocessable Entity");

export type CaptureTransactionResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  transaction_view?: TransactionView | undefined;
  errors_bolt_api_response?: ErrorsBoltApiResponse | undefined;
  object?: CaptureTransactionResponseBody | undefined;
};

export const CaptureTransactionResponse$zodSchema: z.ZodType<
  CaptureTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  errors_bolt_api_response: ErrorsBoltApiResponse$zodSchema.optional(),
  object: z.lazy(() => CaptureTransactionResponseBody$zodSchema).optional(),
  transaction_view: TransactionView$zodSchema.optional(),
});
