/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AmountView, AmountView$zodSchema } from "./amountview.js";
import { CaptureStatus, CaptureStatus$zodSchema } from "./capturestatus.js";

/**
 * Fee type options. **Nullable** for Transactions Details.
 *
 * @remarks
 */
export const CaptureViewType$zodSchema = z.enum([
  "net",
  "processing_fee",
  "risk_fee",
  "apm_fee",
  "network_fee",
  "platform_fee",
  "bolt_account_fee",
]).describe(
  "Fee type options. **Nullable** for Transactions Details.\n"
    + "",
);

export type CaptureViewType = z.infer<typeof CaptureViewType$zodSchema>;

/**
 * A split of fees by type and amount.
 */
export type Split = {
  amount?: AmountView | undefined;
  type?: CaptureViewType | undefined;
};

export const Split$zodSchema: z.ZodType<Split, z.ZodTypeDef, unknown> = z
  .object({
    amount: AmountView$zodSchema.optional(),
    type: CaptureViewType$zodSchema.optional(),
  }).describe("A split of fees by type and amount.");

/**
 * Deprecated. Use `captures`.
 */
export type CaptureView = {
  amount?: AmountView | undefined;
  id?: string | undefined;
  merchant_event_id?: string | undefined;
  metadata?: { [k: string]: string } | undefined;
  splits?: Array<Split> | undefined;
  status?: CaptureStatus | undefined;
};

export const CaptureView$zodSchema: z.ZodType<
  CaptureView,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: AmountView$zodSchema.optional(),
  id: z.string().optional(),
  merchant_event_id: z.string().optional(),
  metadata: z.record(z.string()).optional(),
  splits: z.array(z.lazy(() => Split$zodSchema)).optional(),
  status: CaptureStatus$zodSchema.optional(),
}).describe("Deprecated. Use `captures`.");
