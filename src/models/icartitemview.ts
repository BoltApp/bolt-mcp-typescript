/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { AmountView, AmountView$zodSchema } from "./amountview.js";
import {
  CartItemCustomization,
  CartItemCustomization$zodSchema,
} from "./cartitemcustomization.js";
import {
  CartItemPropertyView,
  CartItemPropertyView$zodSchema,
} from "./cartitempropertyview.js";
import { GiftOptionView, GiftOptionView$zodSchema } from "./giftoptionview.js";
import { IWeight, IWeight$zodSchema } from "./iweight.js";
import { Subscription, Subscription$zodSchema } from "./subscription.js";

export const ICartItemViewShipmentType$zodSchema = z.enum([
  "unknown",
  "door_delivery",
  "ship_to_store",
  "in_store_pickup",
  "ship_to_home_only",
]);

export type ICartItemViewShipmentType = z.infer<
  typeof ICartItemViewShipmentType$zodSchema
>;

export const ICartItemViewType$zodSchema = z.enum([
  "unknown",
  "digital",
  "physical",
  "bundled",
]);

export type ICartItemViewType = z.infer<typeof ICartItemViewType$zodSchema>;

export type ICartItemView = {
  bolt_product_id?: string | undefined;
  brand?: string | undefined;
  category?: string | null | undefined;
  collections?: Array<string> | undefined;
  color?: string | undefined;
  customizations?: Array<CartItemCustomization> | undefined;
  description?: string | undefined;
  details_url?: string | undefined;
  gift_option?: GiftOptionView | undefined;
  hide?: boolean | undefined;
  image_url?: string | undefined;
  isbn?: string | null | undefined;
  item_group?: string | undefined;
  manufacturer?: string | null | undefined;
  merchant_product_id?: string | undefined;
  merchant_variant_id?: string | undefined;
  msrp?: AmountView | undefined;
  name?: string | undefined;
  options?: string | undefined;
  properties?: Array<CartItemPropertyView> | undefined;
  quantity?: number | undefined;
  reference?: string | undefined;
  shipment_id?: string | undefined;
  shipment_type?: ICartItemViewShipmentType | undefined;
  shopify_line_item_reference?: number | undefined;
  shopify_product_reference?: number | undefined;
  shopify_product_variant_reference?: number | undefined;
  size?: string | undefined;
  sku?: string | null | undefined;
  subscription?: Subscription | undefined;
  tags?: string | undefined;
  tax_amount?: AmountView | undefined;
  taxable?: boolean | undefined;
  total_amount?: AmountView | undefined;
  type?: ICartItemViewType | undefined;
  unit_price?: AmountView | undefined;
  uom?: string | null | undefined;
  upc?: string | null | undefined;
  weight?: IWeight | undefined;
};

export const ICartItemView$zodSchema: z.ZodType<
  ICartItemView,
  z.ZodTypeDef,
  unknown
> = z.object({
  bolt_product_id: z.string().optional(),
  brand: z.string().optional(),
  category: z.string().nullable().optional(),
  collections: z.array(z.string()).optional(),
  color: z.string().optional(),
  customizations: z.array(CartItemCustomization$zodSchema).optional(),
  description: z.string().optional(),
  details_url: z.string().optional(),
  gift_option: GiftOptionView$zodSchema.optional(),
  hide: z.boolean().optional(),
  image_url: z.string().optional(),
  isbn: z.string().nullable().optional(),
  item_group: z.string().optional(),
  manufacturer: z.string().nullable().optional(),
  merchant_product_id: z.string().optional(),
  merchant_variant_id: z.string().optional(),
  msrp: AmountView$zodSchema.optional(),
  name: z.string().optional(),
  options: z.string().optional(),
  properties: z.array(CartItemPropertyView$zodSchema).optional(),
  quantity: z.number().optional(),
  reference: z.string().optional(),
  shipment_id: z.string().optional(),
  shipment_type: ICartItemViewShipmentType$zodSchema.optional(),
  shopify_line_item_reference: z.number().optional(),
  shopify_product_reference: z.number().optional(),
  shopify_product_variant_reference: z.number().optional(),
  size: z.string().optional(),
  sku: z.string().nullable().optional(),
  subscription: Subscription$zodSchema.optional(),
  tags: z.string().optional(),
  tax_amount: AmountView$zodSchema.optional(),
  taxable: z.boolean().optional(),
  total_amount: AmountView$zodSchema.optional(),
  type: ICartItemViewType$zodSchema.optional(),
  unit_price: AmountView$zodSchema.optional(),
  uom: z.string().nullable().optional(),
  upc: z.string().nullable().optional(),
  weight: IWeight$zodSchema.optional(),
});
